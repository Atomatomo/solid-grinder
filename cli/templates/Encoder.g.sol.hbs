//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {IAddressTable} from "@main/interfaces/IAddressTable.sol";

{{#with this}}
contract {{contract_name}}_DataEncode {
{{/with}}

    IAddressTable public immutable addressTable;

    {{#each this.function.args}}uint8 private constant {{this.function_name}}_{{this.arg_name}}_BitSize = {{this.packed_bit_size}};
    {{/each}}

    uint8[] public unpackedBits;
    uint8[] public subBits;
    uint8[][] public packedBits;

    constructor(IAddressTable _addressTable) {
        addressTable = _addressTable;
        initPackedBits();
    }

    /**
     * @notice init the array to store the byte chunks to be encode
     *
     */
    function initPackedBits() private {

        {{#each this.function.args}}unpackedBits.push({{this.function_name}}_{{this.arg_name}}_BitSize);
        {{/each}}

        uint16 bitsSum = 0;

        for (uint256 i = 0; i < unpackedBits.length; i++) {
            bitsSum += unpackedBits[i];
            if (bitsSum > 256) {
                packedBits.push(subBits);
                delete subBits;
                bitsSum = unpackedBits[i];
            }
            subBits.push(unpackedBits[i]);
        }
        packedBits.push(subBits);
        delete subBits;
    }

}